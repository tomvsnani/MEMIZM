// Generated by view binder compiler. Do not edit!
package com.example.memeizm.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.memeizm.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CustomViewAndroidBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View bottomLeft;

  @NonNull
  public final View bottomRight;

  @NonNull
  public final EditText customText;

  @NonNull
  public final View topLeft;

  @NonNull
  public final View topRight;

  private CustomViewAndroidBinding(@NonNull ConstraintLayout rootView, @NonNull View bottomLeft,
      @NonNull View bottomRight, @NonNull EditText customText, @NonNull View topLeft,
      @NonNull View topRight) {
    this.rootView = rootView;
    this.bottomLeft = bottomLeft;
    this.bottomRight = bottomRight;
    this.customText = customText;
    this.topLeft = topLeft;
    this.topRight = topRight;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomViewAndroidBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomViewAndroidBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.custom_view_android, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomViewAndroidBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom_left;
      View bottomLeft = rootView.findViewById(id);
      if (bottomLeft == null) {
        break missingId;
      }

      id = R.id.bottom_right;
      View bottomRight = rootView.findViewById(id);
      if (bottomRight == null) {
        break missingId;
      }

      id = R.id.custom_text;
      EditText customText = rootView.findViewById(id);
      if (customText == null) {
        break missingId;
      }

      id = R.id.top_left;
      View topLeft = rootView.findViewById(id);
      if (topLeft == null) {
        break missingId;
      }

      id = R.id.top_right;
      View topRight = rootView.findViewById(id);
      if (topRight == null) {
        break missingId;
      }

      return new CustomViewAndroidBinding((ConstraintLayout) rootView, bottomLeft, bottomRight,
          customText, topLeft, topRight);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
